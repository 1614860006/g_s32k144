* hacking S32K144
** 简介
S32K144是NXP推出的车规级别的MCU，ARM架构的内核。芯片在设计上考虑了功能安全的设计，可以达到ASIL B的级别。
这方面我没有太多的ARM平台的经验，恰好借助这个平台了解一下。
虽说按照一般的认知，SDK比自己手写驱动要简单。但是关于SDK的使用，我也没有太多经验。这次hack过程中研究一下这里面的技巧。
除了驱动之外，尽量在这个平台上熟悉一下FreeRTOS的平台开发。
** 维护者联系方式
- 微信: grey0612 添加时务必备注S32K144并说明自己的沟通目的
- Email: greyzhang@126.com
** TDL
- 1. MCU资料收集(DONE)
- 2. 开发板资料收集(DONE)
- 3. 开发工具选择(DONE)
- 4. 工程创建以及开发环境配置(DONE)
- 5. 软件调试方式(DONE)
- 6. 周期性定时器
- 7. GPIO
- 8. 时钟配置
- 9. 串口
- 10. CAN
- 11. ADC
- 12. SPI
- 13. IIC
- 14. RTOS
- 15. BootLoader
- 16. DMA
- 17. 中断
- 18. 加密
- 19. QuadSPI
- 20. 数学以及电机库文件的使用
** 实践路线
*** MCU资料收集
- S32Kxxx MCU产品模块图
- Data Sheet
- 用户参考手册
- S32K系列情况说明书（这个其实包含了产品模块图的信息）
- 相关资料: S32K144_001_docs
- 总结分析的小结参考链接: https://blog.csdn.net/grey_csdn/article/details/104239649
*** 开发板资料收集
- 首先需要说明的是我购买的开发板就是官方的开发板版本，从标签看，版本是Rev C。
- 原理图
- 快速入门说明
- 相关资料: S32K144_002_EVB
- 总结分析参考链接: https://blog.csdn.net/grey_csdn/article/details/104241437
*** 开发工具选择
- 编译器套件:选择NXP官方的S32DS for ARM。这是一个基于gcc的免费的开发套件，作为我们的学习选择还是不错的。
- 调试器:看到了开发板上自带了一个OpenSDA，这算是其中的一个选择。另外，我也准备了一个Jlink。
*** 开发工具S32DS for ARM初步了解
- 总结分析的小结参考链接: https://blog.csdn.net/grey_csdn/article/details/104287624
*** S32DS快速上手文档分析
- 总结分析的小结参考链接: https://blog.csdn.net/grey_csdn/article/details/104304187
*** S32DS for ARM的共性特征学习
- 总结分析的小结参考链接: https://blog.csdn.net/grey_csdn/article/details/104304578
*** 使用S32DS for ARM创建S32K144工程并编译
- 相关代码参考: S32K144_003_new_project
- 总结分析的小结参考链接: https://blog.csdn.net/grey_csdn/article/details/104320363
*** 开发板供电、软件烧写以及调试
- 总结分析的小结参考链接: https://blog.csdn.net/grey_csdn/article/details/104342133
*** 使用S32DS通过例子创建相应工程
- 总结分析的小结参考链接: https://blog.csdn.net/grey_csdn/article/details/104343682
*** 使用S32DS创建基于SDK的工程
- 总结分析的小结参考链接: https://blog.csdn.net/grey_csdn/article/details/104344325
*** S32DS SDK的使用
- 总结分析的小结参考链接: https://blog.csdn.net/grey_csdn/article/details/104344731
*** S32DS导入已经存在的工程
- 总结分析的小结参考链接: https://blog.csdn.net/grey_csdn/article/details/104345059
*** S32DS解决编译找不到已经添加的文件和目录问题
- 总结分析的小结参考链接: https://blog.csdn.net/grey_csdn/article/details/104347712
*** 使用S32DS结合SDK，创建FreeRTOS的工程
- 参考代码: S32K144_004_create_freeRTOS_project
- 总结分析的小结参考链接: https://blog.csdn.net/grey_csdn/article/details/104347849
*** 基于FreeRTOS的串口打印例子测试与分析
- 总结分析的小结参考链接: https://blog.csdn.net/grey_csdn/article/details/104383774
*** 在S32DS中修改工程名称
- 软件工程参考: S32K144_005_rename_project
- 总结分析的小结参考链接: https://blog.csdn.net/grey_csdn/article/details/104384152
*** 时钟配置
- 核心代码参考: S32K144_006
- 总结分析的小结参考链接: https://blog.csdn.net/grey_csdn/article/details/104420403
*** S32DS中实时查看变量的变化
- 总结分析的小结参考链接: https://blog.csdn.net/grey_csdn/article/details/104420541
*** S32K144实现串口驱动
- 参考代码: S32K1144_007
- 总结分析的小结参考链接: https://blog.csdn.net/grey_csdn/article/details/104420809
*** 串口的波特率配置测试
- 总结分析的小结参考链接: https://blog.csdn.net/grey_csdn/article/details/104435958
*** 使用DMA的UART
- 总结分析的小结参考链接: https://blog.csdn.net/grey_csdn/article/details/104436193
*** GPIO控制LED闪烁
- 代码参考: S32K144_009_GPIO_LED
- 总结分析的小结参考链接: https://blog.csdn.net/grey_csdn/article/details/104444332
*** 周期性定时器 LPIT
- 参考代码: S32K144_010_PIT
- 总结分析的小结参考链接: https://blog.csdn.net/grey_csdn/article/details/104449049

